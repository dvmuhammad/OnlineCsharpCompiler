@page "/list"
@using OnlineCompiler.Shared
@inject HttpClient Http
@using System.Globalization
@inject IStringLocalizer<Localization> Loc

<PageTitle>@Loc["OnlineCsharpCompiler"]</PageTitle>

<div class="container mt-4">
    <div class="text-center">
        <h2>Связный список(List)</h2>
    </div>
    <p>Еще одна важная линейная структура данных, которая на первый взгляд похожа на массив, но отличается распределением памяти, внутренней организацией и способом выполнения основных операций вставки и удаления.</p>
    <p>Связный список – это сеть узлов, каждый из которых содержит данные и указатель на следующий узел в цепочке. Также есть указатель на первый элемент – head. Если список пуст, то он указывает на null.</p>
    <p>Связные списки используются для реализации файловых систем, хэш-таблиц и списков смежности.</p>
    
    <p>Вот визуальное представление внутренней структуры связного списка:</p>
    <img src="5.png" alt="Визуальное представление внутренней структуры связного списка">
    
    <h4 class="mt-4">Типы связных списков:</h4>
        <ul>
            <li>Однонаправленный.</li>
            <li>Двунаправленный.</li>
        </ul>
    
    <h4 class="mt-4">Основные операции со связными списками</h4>
    <ul>
        <li>InsertAtEnd – вставка в конец.</li>
        <li>InsertAtHead – вставка в начало.</li>
        <li>Delete – удаление указанного элемента.</li>
        <li>DeleteAtHead – удаление первого элемента.</li>
        <li>Search – получение указанного элемента.</li>
        <li>isEmpty – возвращает true, если связный список пуст.</li>
    </ul>
</div>


@Loc["Description"]
<p></p>
<CodeEditor @bind-Code="InnerCode">@TemplateList.ListCode
</CodeEditor>

<br />

<button class="btn btn-primary @(ExecuteButtonDisabled?"disabled":"")" @onclick="ExecuteCode">@Loc["Execute"]</button>

@if (ExecutionInfo != null)
{
    <text>&nbsp;</text>
    switch (ExecutionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
            {
                <status-indicator pulse />
                <label>@Loc["Preparing"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Compiling:
            {
                <status-indicator active />
                <label>@Loc["Compiling"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.CompilationError:
            {
                <status-indicator negative />
                <label>@Loc["CompilationError"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Running:
            {
                <status-indicator active pulse />
                <label>@Loc["Running"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Finished:
            {
                <status-indicator positive />
                <label>@Loc["Finished"]</label>
                break;
            }
    }
    <br />
    if (ExecutionInfo.Output != null && OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
    }
}

@code
{
    private string? InnerCode;

    private bool ExecuteButtonDisabled { get => ExecutionId != null; }

    /// <summary>
    /// Unique id of code execution operation
    /// </summary>
    private string? ExecutionId;
    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? ExecutionInfo;
    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => ExecutionInfo?.Output.Split(Environment.NewLine);

    private async void ExecuteCode()
    {
        if (InnerCode != null && !ExecuteButtonDisabled)
        {
            // Sending C# code to server
            HttpResponseMessage? response = await Http.PostAsJsonAsync("Execution", InnerCode);
            // Getting unique id of code execution operation from server
            if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                ExecutionId = await response.Content.ReadAsStringAsync();
                ExecutionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Preparing);
                StateHasChanged();
                await StatusUpdateLoop();
            }
        }
    }

    private async Task StatusUpdateLoop()
    {
        do
        {
            ExecutionInfo = ((ExecutionInfo?)(await Http.GetFromJsonAsync<ExecutionInfo?>("Execution/" + ExecutionId)));
            StateHasChanged();
            await Task.Delay(1000);
        } while (ExecutionInfo != null && (ExecutionInfo.Status != ExecutionInfo.ExecutionStatus.Finished && ExecutionInfo.Status != ExecutionInfo.ExecutionStatus.CompilationError));
        ExecutionId = null;
        StateHasChanged();
    }
}