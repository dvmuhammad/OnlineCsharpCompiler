@page "/dictionary"
@using OnlineCompiler.Shared
@inject HttpClient Http
@using System.Globalization
@inject IStringLocalizer<Localization> Loc

<PageTitle>@Loc["OnlineCsharpCompiler"]</PageTitle>

<div class="container my-5">
    <div class="text-center">
        <h2>Словарь (Dictionary)</h2>
    </div>
    <p>Словарь (Dictionary) - это структура данных, которая представляет собой набор пар "ключ-значение". Ключи должны быть уникальными, а значения могут повторяться.</p>
    <p>Словари используются для хранения и быстрого доступа к данным, которые можно идентифицировать уникальным ключом.</p>
    <h3>Пример использования словаря</h3>
    <div class="row">
        <div class="col-md-6">
            <p>Создадим словарь с некоторыми данными:</p>
            <pre>
                <code>
                    Dictionary&lt;string, int&gt; myDict = new Dictionary&lt;string, int&gt;()
                    {
                        {"apple", 1},
                        {"banana", 2},
                        {"cherry", 3}
                    };
                </code>
            </pre>
            <p>Получим значение по ключу:</p>
            <pre>
                            <code>
                                int value = myDict["banana"];
                            </code>
                        </pre>
            
        </div>
        
    </div>
    
    <p>Вот визуальное представление внутренней структуры словар:</p>
    <img src="6.png" alt="Визуальное представление внутренней структуры словар">

    <h3>Основные операции со словарем</h3>
    <ul>
        <li>Add(key, value) - добавление новой пары "ключ-значение" в словарь</li>
        <li>Remove(key) - удаление пары "ключ-значение" из словаря по ключу</li>
        <li>ContainsKey(key) - проверка наличия ключа в словаре</li>
        <li>ContainsValue(value) - проверка наличия значения в словаре</li>
        <li>TryGetValue(key, out value) - получение значения по ключу. Если ключ не найден, возвращает false.</li>
        <li>Keys - получение коллекции ключей</li>
        <li>Values - получение коллекции значений</li>
    </ul>
</div>

@Loc["Description"]
<p></p>
<CodeEditor @bind-Code="InnerCode">@TemplateDictionary.DictionaryCode
</CodeEditor>

<br />

<button class="btn btn-primary @(ExecuteButtonDisabled?"disabled":"")" @onclick="ExecuteCode">@Loc["Execute"]</button>

@if (ExecutionInfo != null)
{
    <text>&nbsp;</text>
    switch (ExecutionInfo.Status)
    {
        case ExecutionInfo.ExecutionStatus.Preparing:
            {
                <status-indicator pulse />
                <label>@Loc["Preparing"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Compiling:
            {
                <status-indicator active />
                <label>@Loc["Compiling"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.CompilationError:
            {
                <status-indicator negative />
                <label>@Loc["CompilationError"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Running:
            {
                <status-indicator active pulse />
                <label>@Loc["Running"]</label>
                break;
            }
        case ExecutionInfo.ExecutionStatus.Finished:
            {
                <status-indicator positive />
                <label>@Loc["Finished"]</label>
                break;
            }
    }
    <br />
    if (ExecutionInfo.Output != null && OutputSplitByNewLines != null)
    {
        @foreach (string line in OutputSplitByNewLines)
        {
            <p>@line</p>
        }
    }
}

@code
{
    private string? InnerCode;

    private bool ExecuteButtonDisabled { get => ExecutionId != null; }

    /// <summary>
    /// Unique id of code execution operation
    /// </summary>
    private string? ExecutionId;
    /// <summary>
    /// Information about code execution operation
    /// </summary>
    private ExecutionInfo? ExecutionInfo;
    /// <summary>
    /// Output from ExecutionInfo, split by Environment.NewLine
    /// </summary>
    private IEnumerable<string>? OutputSplitByNewLines => ExecutionInfo?.Output.Split(Environment.NewLine);

    private async void ExecuteCode()
    {
        if (InnerCode != null && !ExecuteButtonDisabled)
        {
            // Sending C# code to server
            HttpResponseMessage? response = await Http.PostAsJsonAsync("Execution", value: InnerCode);
            // Getting unique id of code execution operation from server
            if (response != null && response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                ExecutionId = await response.Content.ReadAsStringAsync();
                ExecutionInfo = new ExecutionInfo(ExecutionInfo.ExecutionStatus.Preparing);
                StateHasChanged();
                await StatusUpdateLoop();
            }
        }
    }

    private async Task StatusUpdateLoop()
    {
        do
        {
            ExecutionInfo = ((ExecutionInfo?)(await Http.GetFromJsonAsync<ExecutionInfo?>("Execution/" + ExecutionId)));
            StateHasChanged();
            await Task.Delay(1000);
        } while (ExecutionInfo != null && (ExecutionInfo.Status != ExecutionInfo.ExecutionStatus.Finished && ExecutionInfo.Status != ExecutionInfo.ExecutionStatus.CompilationError));
        ExecutionId = null;
        StateHasChanged();
    }
}